name: ci

on:
  workflow_dispatch:
  push:
jobs:
  container-test-job:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        file_type: [ 'duckdb' ]
        # file_type: [ 'csv', 'json', 'parquet', 'duckdb', 'wal' ]
    steps:
      - name: Checkout Duckdb AFL++
        uses: actions/checkout@v4
        with:
          repository: duckdblabs/duckdb_aflplusplus
          ref: 'csv_fuzz_with_flags'
          token: ${{ secrets.AFL }}
          
      # - run: sed -i 's/3600/6000/g' Makefile
      
      # - name: Verify directory structure
      
      #   run: |
      #     ls -la
      #     ls -la src
      #     ls -la scripts
      
      - name: Set up Docker environment
        run: |
          docker --version
          docker pull aflplusplus/aflplusplus

      - name: Start AFL++ container
        run: |
          # Run the container in detached mode, naming it 'afl-container'
          docker run --name afl-container -d aflplusplus/aflplusplus sleep infinity

      - name: Copy directories into container (make afl-up)
        run: |
          # Create necessary directories in the container and copy files
          docker exec -w / afl-container mkdir -p duckdb_aflplusplus
          docker cp src afl-container:/duckdb_aflplusplus/src
          docker cp scripts afl-container:/duckdb_aflplusplus/scripts
          docker exec afl-container mkdir -p /duckdb_aflplusplus/build
          docker exec afl-container mkdir -p /duckdb_aflplusplus/corpus
          docker exec afl-container mkdir -p /duckdb_aflplusplus/results
      - name: Install DuckDB into the container
        run: |
          # Install dependencies (like wget) and DuckDB inside the container
          docker exec afl-container apt-get update
          docker exec afl-container apt-get install -y wget unzip
          docker exec afl-container wget https://github.com/duckdb/duckdb/releases/download/v1.1.3/duckdb_cli-linux-amd64.zip
          docker exec afl-container unzip duckdb_cli-linux-amd64.zip
          docker exec afl-container mv duckdb /usr/local/bin/duckdb
          docker exec afl-container duckdb --version
      
      # - name: upterm
      #   uses: owenthereal/action-upterm@v1
      - name: Compile Fuzzer
        # continue-on-error: true
        run: |
          make compile-fuzzers-CI
          
      - name: Install DuckDB
        run: |
          wget https://github.com/duckdb/duckdb/releases/download/v1.1.3/duckdb_cli-linux-amd64.zip
          unzip duckdb_cli-linux-amd64.zip
          sudo mv duckdb /usr/local/bin/duckdb
          rm duckdb_cli-linux-amd64.zip
      
      - name: Fuzz
        run: |
          make fuzz-duckdb-file
          # for file_type in [ 'csv', 'json', 'parquet', 'duckdb', 'wal' ]
          # do 
          # make fuzz-${file_type}-file
          # done
          # make afl-down
      
      - name: Inspect fuzz results
        continue-on-error: true
        run: |
          # for file_type in [ 'csv', 'json', 'parquet', 'duckdb', 'wal' ]
          # do 
          file_type=duckdb
            # count=$(ls fuzz_results/${file_type}_file_fuzzer/default/crashes | wc -l)
            count=$(ls fuzz_results/${file_type}_file_fuzzer/default/crashes | wc -l)
            if [ $count -eq 0 ]; then
              echo "Fuzz results directory is empty."
              exut 1
            else
              echo "CRASHES ðŸ“ŒðŸ“ŒðŸ“Œ"
              ls fuzz_results/${file_type}_file_fuzzer/default/crashes > ${file_type}_crashes.txt
              cat ${file_type}_crashes.txt
              exit 0
            fi
          # done
      - uses: actions/upload-artifact@v4
        continue-on-error: true
        with:
          name: ${{ matrix.file_type }}_crashes.txt
          path: ${{ matrix.file_type }}_crashes.txt
    
      - name: Reproduce crashes
        if: success()
        continue-on-error: true
        run: |
          file_type=duckdb
          files=$(ls fuzz_results/${file_type}_file_fuzzer/default/crashes)
          for file in $files
            do
              if [[ $file != 'README.txt' && $file != 'readme.md' ]]; then
                echo Processing file: $file
                duckdb $file
                duckdb -c "ATTACH '$file' AS tmp_db (READ_ONLY); use tmp_db; show tables;"
                ./scripts/fix_duckdb_file.py $file
                echo $?
              fi
            done
          ./scripts/test_duckdb_output.sh
      - name: Setup upterm session
        uses: lhotari/action-upterm@v1
